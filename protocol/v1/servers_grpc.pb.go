// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package serversv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServersClient is the client API for Servers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServersClient interface {
	Get(ctx context.Context, in *ResourceIdentity, opts ...grpc.CallOption) (*Server, error)
	List(ctx context.Context, in *ListFilter, opts ...grpc.CallOption) (Servers_ListClient, error)
	Create(ctx context.Context, in *Server, opts ...grpc.CallOption) (*ResourceChange, error)
	Update(ctx context.Context, in *Patch, opts ...grpc.CallOption) (*ResourceChange, error)
	Delete(ctx context.Context, in *ResourceIdentity, opts ...grpc.CallOption) (*ResourceChange, error)
	Watch(ctx context.Context, in *ResourceIdentity, opts ...grpc.CallOption) (Servers_WatchClient, error)
}

type serversClient struct {
	cc grpc.ClientConnInterface
}

func NewServersClient(cc grpc.ClientConnInterface) ServersClient {
	return &serversClient{cc}
}

func (c *serversClient) Get(ctx context.Context, in *ResourceIdentity, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/me.vniche.collective.v1.Servers/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversClient) List(ctx context.Context, in *ListFilter, opts ...grpc.CallOption) (Servers_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Servers_ServiceDesc.Streams[0], "/me.vniche.collective.v1.Servers/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &serversListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Servers_ListClient interface {
	Recv() (*Server, error)
	grpc.ClientStream
}

type serversListClient struct {
	grpc.ClientStream
}

func (x *serversListClient) Recv() (*Server, error) {
	m := new(Server)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serversClient) Create(ctx context.Context, in *Server, opts ...grpc.CallOption) (*ResourceChange, error) {
	out := new(ResourceChange)
	err := c.cc.Invoke(ctx, "/me.vniche.collective.v1.Servers/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversClient) Update(ctx context.Context, in *Patch, opts ...grpc.CallOption) (*ResourceChange, error) {
	out := new(ResourceChange)
	err := c.cc.Invoke(ctx, "/me.vniche.collective.v1.Servers/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversClient) Delete(ctx context.Context, in *ResourceIdentity, opts ...grpc.CallOption) (*ResourceChange, error) {
	out := new(ResourceChange)
	err := c.cc.Invoke(ctx, "/me.vniche.collective.v1.Servers/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversClient) Watch(ctx context.Context, in *ResourceIdentity, opts ...grpc.CallOption) (Servers_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Servers_ServiceDesc.Streams[1], "/me.vniche.collective.v1.Servers/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &serversWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Servers_WatchClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type serversWatchClient struct {
	grpc.ClientStream
}

func (x *serversWatchClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServersServer is the server API for Servers service.
// All implementations must embed UnimplementedServersServer
// for forward compatibility
type ServersServer interface {
	Get(context.Context, *ResourceIdentity) (*Server, error)
	List(*ListFilter, Servers_ListServer) error
	Create(context.Context, *Server) (*ResourceChange, error)
	Update(context.Context, *Patch) (*ResourceChange, error)
	Delete(context.Context, *ResourceIdentity) (*ResourceChange, error)
	Watch(*ResourceIdentity, Servers_WatchServer) error
	mustEmbedUnimplementedServersServer()
}

// UnimplementedServersServer must be embedded to have forward compatible implementations.
type UnimplementedServersServer struct {
}

func (UnimplementedServersServer) Get(context.Context, *ResourceIdentity) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServersServer) List(*ListFilter, Servers_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedServersServer) Create(context.Context, *Server) (*ResourceChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServersServer) Update(context.Context, *Patch) (*ResourceChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServersServer) Delete(context.Context, *ResourceIdentity) (*ResourceChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServersServer) Watch(*ResourceIdentity, Servers_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedServersServer) mustEmbedUnimplementedServersServer() {}

// UnsafeServersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServersServer will
// result in compilation errors.
type UnsafeServersServer interface {
	mustEmbedUnimplementedServersServer()
}

func RegisterServersServer(s grpc.ServiceRegistrar, srv ServersServer) {
	s.RegisterService(&Servers_ServiceDesc, srv)
}

func _Servers_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/me.vniche.collective.v1.Servers/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServer).Get(ctx, req.(*ResourceIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servers_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServersServer).List(m, &serversListServer{stream})
}

type Servers_ListServer interface {
	Send(*Server) error
	grpc.ServerStream
}

type serversListServer struct {
	grpc.ServerStream
}

func (x *serversListServer) Send(m *Server) error {
	return x.ServerStream.SendMsg(m)
}

func _Servers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Server)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/me.vniche.collective.v1.Servers/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServer).Create(ctx, req.(*Server))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servers_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/me.vniche.collective.v1.Servers/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServer).Update(ctx, req.(*Patch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servers_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/me.vniche.collective.v1.Servers/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServer).Delete(ctx, req.(*ResourceIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servers_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResourceIdentity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServersServer).Watch(m, &serversWatchServer{stream})
}

type Servers_WatchServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type serversWatchServer struct {
	grpc.ServerStream
}

func (x *serversWatchServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// Servers_ServiceDesc is the grpc.ServiceDesc for Servers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Servers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "me.vniche.collective.v1.Servers",
	HandlerType: (*ServersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Servers_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Servers_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Servers_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Servers_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Servers_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _Servers_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol/v1/servers.proto",
}
